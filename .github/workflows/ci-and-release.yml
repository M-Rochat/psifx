name: ci-and-release

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  run-tests:
    name: Tests (Python ${{ matrix.python-version }})
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9, 3.10, 3.11, 3.12]

    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install requirements
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt

      - name: Install OpenFace
        run: |
          wget https://raw.githubusercontent.com/GuillaumeRochette/OpenFace/master/install.py
          python install.py --license_accepted --install_path $HOME/openface --overwrite_install --minimal_install --no-add_to_login_shell

      - name: Install Ollama
        run: curl -fsSL https://ollama.com/install.sh | sh

      - name: Run tests
        run: |
          echo "Running tests..."
          pytest tests
  

  create-tag-and-release:
    runs-on: ubuntu-latest
    needs: run-tests
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: checkout
        id: checkout
        uses: actions/checkout@v4
      - name: setup-python
        id: setup-python
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'
      - name: install-packages
        id: install-packages
        run: |
          python -m pip install --upgrade pip setuptools wheel
      - name: get-current-version
        id: get-current-version
        run: |
          git fetch --tags
          CURRENT_VERSION=$(git describe --tags $(git rev-list --tags --max-count=1))
          echo "CURRENT_VERSION=$CURRENT_VERSION" >> $GITHUB_OUTPUT
      - name: get-latest-version
        id: get-latest-version
        run: |
          LATEST_VERSION=$(python setup.py --version)
          echo "LATEST_VERSION=$LATEST_VERSION" >> $GITHUB_OUTPUT
      - name: has-changed-version
        id: has-changed-version
        env:
          CURRENT_VERSION: ${{ steps.get-current-version.outputs.CURRENT_VERSION }}
          LATEST_VERSION: ${{ steps.get-latest-version.outputs.LATEST_VERSION }}
        run: |
          if [ "$CURRENT_VERSION" != "$LATEST_VERSION" ]; then
            HAS_CHANGED_VERSION=true
          else
            HAS_CHANGED_VERSION=false
          fi
          echo "HAS_CHANGED_VERSION=$HAS_CHANGED_VERSION" >> $GITHUB_OUTPUT
      - name: create-tag
        id: create-tag
        if: steps.has-changed-version.outputs.HAS_CHANGED_VERSION == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.ACCESS_TOKEN }}
          LATEST_VERSION: ${{ steps.get-latest-version.outputs.LATEST_VERSION }}
        run: |
          git tag $LATEST_VERSION
          git push origin --tags
      - name: create-release
        id: create-release
        if: steps.has-changed-version.outputs.HAS_CHANGED_VERSION == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.ACCESS_TOKEN }}
          LATEST_VERSION: ${{ steps.get-latest-version.outputs.LATEST_VERSION }}
        run: |
          gh release create "$LATEST_VERSION" --generate-notes
